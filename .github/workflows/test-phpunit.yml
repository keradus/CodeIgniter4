name: PHP Tests

on:
  push:
    branches: 
      - action-test
  pull_request:
    branches:
      - develop

jobs:

  sqlite_tests:
    runs-on: ubuntu-latest

    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    services:
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries 3

    strategy:
      fail-fast: true
      matrix:
        php-versions: ['7.4']

    name: PHP ${{ matrix.php-versions }} - SQLite3

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          tools: composer, pecl, phpunit
          extensions: intl, json, mbstring, mysqlnd, xdebug, xml, imagick, gd, readline
          coverage: xdebug

      - name: Install memcached
        uses: niden/actions-memcached@v7

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-progress --no-suggest --no-interaction --prefer-dist --optimize-autoloader
        env:
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}

      - name: Test with phpunit
        run: vendor/bin/phpunit --coverage-text
        env:
          DB: sqlite


  mysqli_tests:
    runs-on: ubuntu-latest

    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_USER: mysql
          MYSQL_PASSWORD: mysql
          MYSQL_DATABASE: test
          MYSQL_ROOT_PASSWORD: mysql
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries 3

    strategy:
      fail-fast: true
      matrix:
        php-versions: ['7.4']

    name: PHP ${{ matrix.php-versions }} - MySQLi

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          tools: composer, pecl, phpunit
          extensions: intl, json, mbstring, mysqlnd, xdebug, xml, imagick, gd, mysqli, readline
          coverage: xdebug

      - name: Install memcached
        uses: niden/actions-memcached@v7

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-progress --no-suggest --no-interaction --prefer-dist --optimize-autoloader
        env:
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}

      - name: Test with phpunit
        run: vendor/bin/phpunit --coverage-text
        env:
          DB: mysqli
          database.tests.port: ${{ job.services.mysql.ports[3306] }}


  postgres_tests:
    runs-on: ubuntu-latest

    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: --health-cmd=pg_isready --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries 3

    strategy:
      fail-fast: true
      matrix:
        php-versions: ['7.4']

    name: PHP ${{ matrix.php-versions }} - Postgres

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          tools: composer, pecl, phpunit
          extensions: intl, json, mbstring, mysqlnd, xdebug, xml, imagick, gd, postgres, readline
          coverage: xdebug

      - name: Install memcached
        uses: niden/actions-memcached@v7

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-progress --no-suggest --no-interaction --prefer-dist --optimize-autoloader
        env:
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}

      - name: Test with phpunit
        run: vendor/bin/phpunit --coverage-text
        env:
          DB: postgres
          database.tests.port: ${{ job.services.postgres.ports[6379] }}