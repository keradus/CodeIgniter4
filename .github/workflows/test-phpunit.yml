name: PHP Tests

on:
  push:
    branches: 
      - action-test
  pull_request:
    branches:
      - develop

jobs:

  tests:
    runs-on: ubuntu-latest

    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: --health-cmd=pg_isready --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      fail-fast: true
      matrix:
        php-versions: ['7.2', '7.3', '7.4']
        db-platforms: ['sqlite', 'mysqli', 'postgres']

    name: PHP ${{ matrix.php-versions }} - ${{ matrix.db-platforms }}

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          tools: composer
          extensions: imagick
          coverage: xdebug

      - name: Install Memcached
        uses: niden/actions-memcached@v7

      - name: Get composer cache directory
        id: composer-cache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache composer dependencies
        uses: actions/cache@v1
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.json') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-progress --no-suggest --no-interaction --prefer-dist --optimize-autoloader
        env:
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}     

      - name: Test with PHPUnit
        run: script -e -c "vendor/bin/phpunit --coverage-text"
        env:
          DB: ${{ matrix.db-platforms }}
          TERM: xterm256

      #- if: success()
      #  run: php tests/bin/php-coveralls.phar -v

