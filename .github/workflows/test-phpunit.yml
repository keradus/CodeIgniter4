name: PHP Tests

on:
  push:
    branches: 
      - action-test-sqlsrv
  pull_request:
    branches:
      - develop

jobs:

  tests:
    runs-on: ubuntu-latest
    name: PHP ${{ matrix.php-versions }} - ${{ matrix.db-platforms }}

    if: "!contains(github.event.head_commit.message, '[ci skip]')"

    services:
      mysql:
        image: mysql:5.7
        env:
          MYSQL_ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3

      postgres:
        image: postgres
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test
        ports:
          - 5432:5432
        options: --health-cmd=pg_isready --health-interval=10s --health-timeout=5s --health-retries=3

      mssql:
        image: microsoft/mssql-server-linux:2017-latest
        env:
          SA_PASSWORD: mssql
          ACCEPT_EULA: Y
          MSSQL_PID: Developer
        ports:
          - 1433:1433
        options: --name mssql -h mssql

      redis:
        image: redis
        ports:
          - 6379:6379
        options: --health-cmd "redis-cli ping" --health-interval=10s --health-timeout=5s --health-retries=3

    strategy:
      fail-fast: true
      matrix:
        php-versions: ['7.4']
        db-platforms: ['sqlsrv']

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Setup PHP, with composer and extensions
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ matrix.php-versions }}
          tools: composer, pelc
          extensions: mbstring, intl, curl, dom, imagick, sqlsrv
          coverage: none

      - name: Install Memcached
        uses: niden/actions-memcached@v7

      #- name: Start Docker for MSSql
      #  run: docker run -e 'ACCEPT_EULA=Y' -e 'SA_PASSWORD=mssql' -e 'MSSQL_PID=Developer' -p 1433:1433 --name mssql -h mssql -d mcr.microsoft.com/mssql/server:2017-latest

      - name: Get composer cache directory
        id: composercache
        run: echo "::set-output name=dir::$(composer config cache-files-dir)"

      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ${{ steps.composercache.outputs.dir }}
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: ${{ runner.os }}-composer-

      - name: Install dependencies
        run: composer install --no-progress --no-suggest --no-interaction --prefer-dist --optimize-autoloader
        env:
          COMPOSER_AUTH: ${{ secrets.COMPOSER_AUTH }}     

      - name: Test with PHPUnit
        run: script -e -c "vendor/bin/phpunit -v --coverage-text"
        env:
          DB: ${{ matrix.db-platforms }}
          TERM: xterm-256color

      #- if: success()
      #  run: php tests/bin/php-coveralls.phar -v

